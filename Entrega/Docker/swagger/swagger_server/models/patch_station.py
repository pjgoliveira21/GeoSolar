# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.base_station import BaseStation  # noqa: F401,E501
from swagger_server import util


class PatchStation(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, country: str=None, continent: str=None, city: str=None, location_accuracy: str='approximate', latitude: float=None, longitude: float=None, name: str='Pulida Solar Park', capacity: float=None, capacity_rating: str='unknown', technology_type: str='unknown', status: str='operating', start_year: float=None, operator: str=None, owner: str=None, wiki_url: str=None, research_date: date=None):  # noqa: E501
        """PatchStation - a model defined in Swagger

        :param country: The country of this PatchStation.  # noqa: E501
        :type country: str
        :param continent: The continent of this PatchStation.  # noqa: E501
        :type continent: str
        :param city: The city of this PatchStation.  # noqa: E501
        :type city: str
        :param location_accuracy: The location_accuracy of this PatchStation.  # noqa: E501
        :type location_accuracy: str
        :param latitude: The latitude of this PatchStation.  # noqa: E501
        :type latitude: float
        :param longitude: The longitude of this PatchStation.  # noqa: E501
        :type longitude: float
        :param name: The name of this PatchStation.  # noqa: E501
        :type name: str
        :param capacity: The capacity of this PatchStation.  # noqa: E501
        :type capacity: float
        :param capacity_rating: The capacity_rating of this PatchStation.  # noqa: E501
        :type capacity_rating: str
        :param technology_type: The technology_type of this PatchStation.  # noqa: E501
        :type technology_type: str
        :param status: The status of this PatchStation.  # noqa: E501
        :type status: str
        :param start_year: The start_year of this PatchStation.  # noqa: E501
        :type start_year: float
        :param operator: The operator of this PatchStation.  # noqa: E501
        :type operator: str
        :param owner: The owner of this PatchStation.  # noqa: E501
        :type owner: str
        :param wiki_url: The wiki_url of this PatchStation.  # noqa: E501
        :type wiki_url: str
        :param research_date: The research_date of this PatchStation.  # noqa: E501
        :type research_date: date
        """
        self.swagger_types = {
            'country': str,
            'continent': str,
            'city': str,
            'location_accuracy': str,
            'latitude': float,
            'longitude': float,
            'name': str,
            'capacity': float,
            'capacity_rating': str,
            'technology_type': str,
            'status': str,
            'start_year': float,
            'operator': str,
            'owner': str,
            'wiki_url': str,
            'research_date': date
        }

        self.attribute_map = {
            'country': 'country',
            'continent': 'continent',
            'city': 'city',
            'location_accuracy': 'locationAccuracy',
            'latitude': 'latitude',
            'longitude': 'longitude',
            'name': 'name',
            'capacity': 'capacity',
            'capacity_rating': 'capacityRating',
            'technology_type': 'technologyType',
            'status': 'status',
            'start_year': 'startYear',
            'operator': 'operator',
            'owner': 'owner',
            'wiki_url': 'wikiUrl',
            'research_date': 'researchDate'
        }
        self._country = country
        self._continent = continent
        self._city = city
        self._location_accuracy = location_accuracy
        self._latitude = latitude
        self._longitude = longitude
        self._name = name
        self._capacity = capacity
        self._capacity_rating = capacity_rating
        self._technology_type = technology_type
        self._status = status
        self._start_year = start_year
        self._operator = operator
        self._owner = owner
        self._wiki_url = wiki_url
        self._research_date = research_date

    @classmethod
    def from_dict(cls, dikt) -> 'PatchStation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The patchStation of this PatchStation.  # noqa: E501
        :rtype: PatchStation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country(self) -> str:
        """Gets the country of this PatchStation.


        :return: The country of this PatchStation.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country: str):
        """Sets the country of this PatchStation.


        :param country: The country of this PatchStation.
        :type country: str
        """

        self._country = country

    @property
    def continent(self) -> str:
        """Gets the continent of this PatchStation.


        :return: The continent of this PatchStation.
        :rtype: str
        """
        return self._continent

    @continent.setter
    def continent(self, continent: str):
        """Sets the continent of this PatchStation.


        :param continent: The continent of this PatchStation.
        :type continent: str
        """

        self._continent = continent

    @property
    def city(self) -> str:
        """Gets the city of this PatchStation.


        :return: The city of this PatchStation.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city: str):
        """Sets the city of this PatchStation.


        :param city: The city of this PatchStation.
        :type city: str
        """

        self._city = city

    @property
    def location_accuracy(self) -> str:
        """Gets the location_accuracy of this PatchStation.


        :return: The location_accuracy of this PatchStation.
        :rtype: str
        """
        return self._location_accuracy

    @location_accuracy.setter
    def location_accuracy(self, location_accuracy: str):
        """Sets the location_accuracy of this PatchStation.


        :param location_accuracy: The location_accuracy of this PatchStation.
        :type location_accuracy: str
        """
        allowed_values = ["approximate", "exact"]  # noqa: E501
        if location_accuracy not in allowed_values:
            raise ValueError(
                "Invalid value for `location_accuracy` ({0}), must be one of {1}"
                .format(location_accuracy, allowed_values)
            )

        self._location_accuracy = location_accuracy

    @property
    def latitude(self) -> float:
        """Gets the latitude of this PatchStation.


        :return: The latitude of this PatchStation.
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude: float):
        """Sets the latitude of this PatchStation.


        :param latitude: The latitude of this PatchStation.
        :type latitude: float
        """

        self._latitude = latitude

    @property
    def longitude(self) -> float:
        """Gets the longitude of this PatchStation.


        :return: The longitude of this PatchStation.
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude: float):
        """Sets the longitude of this PatchStation.


        :param longitude: The longitude of this PatchStation.
        :type longitude: float
        """

        self._longitude = longitude

    @property
    def name(self) -> str:
        """Gets the name of this PatchStation.


        :return: The name of this PatchStation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this PatchStation.


        :param name: The name of this PatchStation.
        :type name: str
        """

        self._name = name

    @property
    def capacity(self) -> float:
        """Gets the capacity of this PatchStation.


        :return: The capacity of this PatchStation.
        :rtype: float
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity: float):
        """Sets the capacity of this PatchStation.


        :param capacity: The capacity of this PatchStation.
        :type capacity: float
        """

        self._capacity = capacity

    @property
    def capacity_rating(self) -> str:
        """Gets the capacity_rating of this PatchStation.


        :return: The capacity_rating of this PatchStation.
        :rtype: str
        """
        return self._capacity_rating

    @capacity_rating.setter
    def capacity_rating(self, capacity_rating: str):
        """Sets the capacity_rating of this PatchStation.


        :param capacity_rating: The capacity_rating of this PatchStation.
        :type capacity_rating: str
        """
        allowed_values = ["unknown", "MW/ac", "MWp/dc"]  # noqa: E501
        if capacity_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `capacity_rating` ({0}), must be one of {1}"
                .format(capacity_rating, allowed_values)
            )

        self._capacity_rating = capacity_rating

    @property
    def technology_type(self) -> str:
        """Gets the technology_type of this PatchStation.


        :return: The technology_type of this PatchStation.
        :rtype: str
        """
        return self._technology_type

    @technology_type.setter
    def technology_type(self, technology_type: str):
        """Sets the technology_type of this PatchStation.


        :param technology_type: The technology_type of this PatchStation.
        :type technology_type: str
        """
        allowed_values = ["unknown", "PV", "Solar Thermal"]  # noqa: E501
        if technology_type not in allowed_values:
            raise ValueError(
                "Invalid value for `technology_type` ({0}), must be one of {1}"
                .format(technology_type, allowed_values)
            )

        self._technology_type = technology_type

    @property
    def status(self) -> str:
        """Gets the status of this PatchStation.


        :return: The status of this PatchStation.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this PatchStation.


        :param status: The status of this PatchStation.
        :type status: str
        """
        allowed_values = ["construction", "operating"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def start_year(self) -> float:
        """Gets the start_year of this PatchStation.


        :return: The start_year of this PatchStation.
        :rtype: float
        """
        return self._start_year

    @start_year.setter
    def start_year(self, start_year: float):
        """Sets the start_year of this PatchStation.


        :param start_year: The start_year of this PatchStation.
        :type start_year: float
        """

        self._start_year = start_year

    @property
    def operator(self) -> str:
        """Gets the operator of this PatchStation.


        :return: The operator of this PatchStation.
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator: str):
        """Sets the operator of this PatchStation.


        :param operator: The operator of this PatchStation.
        :type operator: str
        """

        self._operator = operator

    @property
    def owner(self) -> str:
        """Gets the owner of this PatchStation.


        :return: The owner of this PatchStation.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner: str):
        """Sets the owner of this PatchStation.


        :param owner: The owner of this PatchStation.
        :type owner: str
        """

        self._owner = owner

    @property
    def wiki_url(self) -> str:
        """Gets the wiki_url of this PatchStation.


        :return: The wiki_url of this PatchStation.
        :rtype: str
        """
        return self._wiki_url

    @wiki_url.setter
    def wiki_url(self, wiki_url: str):
        """Sets the wiki_url of this PatchStation.


        :param wiki_url: The wiki_url of this PatchStation.
        :type wiki_url: str
        """

        self._wiki_url = wiki_url

    @property
    def research_date(self) -> date:
        """Gets the research_date of this PatchStation.


        :return: The research_date of this PatchStation.
        :rtype: date
        """
        return self._research_date

    @research_date.setter
    def research_date(self, research_date: date):
        """Sets the research_date of this PatchStation.


        :param research_date: The research_date of this PatchStation.
        :type research_date: date
        """

        self._research_date = research_date
